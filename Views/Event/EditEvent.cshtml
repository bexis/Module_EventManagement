
@using Telerik.Web.Mvc.UI
@using BExIS.Modules.EMM.UI.Models;

@model EventModel
<link href="@Url.Content("~/Areas/EMM/Content/main.css")" rel="stylesheet" type="text/css" />

@{
    string fileName = "";
    if (Model.JavaScriptPath != null){
        fileName = Model.JavaScriptPath.Split('/')[Model.JavaScriptPath.Split('/').Length - 1];
    }
   
}

  @Html.ValidationSummary(true)
  @using(Html.BeginForm("Save", "Event", FormMethod.Post, new
  {
      enctype = "multipart/form-data" }))
{
@Html.HiddenFor(m => m.Id)
<table class="bx-table-form" style="width: 500px;">
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.Name)
        </td>
        <td>
            @Html.TextBoxFor(m => m.Name, new { @class = "bx-input", @tabindex = "2" })
            <small>@Html.ValidationMessage("Name")</small>
        </td>
    </tr>
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.EventDate)
        </td>
        <td>
            @Html.TextBoxFor(m => m.EventDate, new { @class = "bx-input", @tabindex = "2" })
            <small>@Html.ValidationMessage("EventDate")</small>
        </td>
    </tr>
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.Location)
        </td>
        <td>
            @Html.TextBoxFor(m => m.Location, new { @class = "bx-input", @tabindex = "2" })
            @*<small>@Html.ValidationMessage("EventDate")</small>*@
        </td>
    </tr>
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.ImportantInformation)
        </td>
        <td>
            @Html.TextAreaFor(m => m.ImportantInformation, new { @class = "bx-textarea", @tabindex = "2" })
            <small>@Html.ValidationMessage("ImportantInformation")</small>
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(m => m.MailInformation)
        </td>
        <td>
            @Html.TextAreaFor(m => m.MailInformation, new { @class = "bx-textarea", @tabindex = "2" })
        </td>
    </tr>
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.SelectedEventLanguage)
        </td>
        <td>
            @Html.DropDownListFor(m => m.SelectedEventLanguage, new SelectList(Model.EventLanguages), "Select")
            <small>@Html.ValidationMessage("EventLanguage")</small>

        </td>
    </tr>
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.StartDate)
        </td>
        @if (Model.EditMode)
        {
            <td>
                @(Html.Telerik().DatePickerFor(m => m.StartDate).HtmlAttributes("class = 'bx-input', tabindex = '2'"))
                <small>@Html.ValidationMessage("StartDate")</small>
            </td>
        }
        else
        {
            <td>
                @(Html.Telerik().DatePickerFor(m => m.StartDate).Value(DateTime.Now).HtmlAttributes("class = 'bx-input', tabindex = '2'"))
                <small>@Html.ValidationMessage("StartDate")</small>
            </td>
        }
    </tr>
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.Deadline)
        </td>
        @if (Model.EditMode)
        {
            <td>@(Html.Telerik().DatePickerFor(m => m.Deadline).HtmlAttributes("class = 'bx-input', tabindex = '2'"))</td>
        }
        else
        {
            <td>@(Html.Telerik().DatePickerFor(m => m.Deadline).Value(DateTime.Now).HtmlAttributes("class = 'bx-input', tabindex = '2'"))</td>
        }
    </tr>
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.ParticipantsLimitation)
        </td>
        <td>
            @(Html.Telerik().IntegerTextBoxFor(m => m.ParticipantsLimitation)
                                                                                                                                      .HtmlAttributes(new { tabindex = "2", style = "border-width: 2px; height: 30px;" })
            )
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(m => m.WaitingList)</td>
        <td>@Html.CheckBoxFor(m => m.WaitingList, new { @class = "js-switch" })</td>
    </tr>
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.WaitingListLimitation)
        </td>
        <td>
            @(Html.Telerik().IntegerTextBoxFor(m => m.WaitingListLimitation)
                                                                                                                                      .HtmlAttributes(new { tabindex = "2", style = "border-width: 2px; height: 30px;" })
            )
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(m => m.EditAllowed)</td>
        <td>@Html.CheckBoxFor(m => m.EditAllowed, new { @class = "js-switch" })</td>
    </tr>
    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.LogInPassword)
        </td>
        <td>
            @Html.TextBoxFor(m => m.LogInPassword, new { @class = "bx-input", @tabindex = "2" })
            <small>@Html.ValidationMessage("LogInPassword")</small>
        </td>
    </tr>

    <tr>
        <td>
            <b title="This field is required" style="color:red">*</b>
            @Html.LabelFor(m => m.MetadataStructureList)
        </td>
        <td>
            @Html.DropDownListFor(m => m.MetadataStructureId, new SelectList(Model.MetadataStructureList, "Id", "Name"), new
            {
                @class = "bx-dropdown",
       style = "-webkit-appearance: menulist; height: 30px;"
            })
        </td> <!--temporty style to fix removed arrow-->
    </tr>
    <tr>
        <td>
            @Html.LabelFor(m => m.XPathToEmail)
        </td>
        <td>
            @Html.DropDownListFor(m => m.XPathToEmail, new SelectList(Model.MetadataNodes, "DisplayName", "XPath"), new
             {
                 @class = "bx-dropdown",
        style = "-webkit-appearance: menulist; height: 30px;"
             })
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(m => m.XPathToFirstName)
        </td>
        <td>
            @Html.DropDownListFor(m => m.XPathToFirstName, new SelectList(Model.MetadataNodes, "DisplayName", "XPath"), new
             {
                 @class = "bx-dropdown",
        style = "-webkit-appearance: menulist; height: 30px;"
             })
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(m => m.XPathToLastName)
        </td>
        <td>
            @Html.DropDownListFor(m => m.XPathToLastName, new SelectList(Model.MetadataNodes, "DisplayName", "XPath"), new
             {
                 @class = "bx-dropdown",
        style = "-webkit-appearance: menulist; height: 30px;"
             })
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(m => m.JavaScriptPath)
        </td>
        <td>
            @fileName
            <input value="JavaScriptPath" name="file" type="file" accept=".js"></input>
        </td> <!--temporty style to fix removed arrow-->
    </tr>
    <tr>
        <td>
            @Html.LabelFor(m => m.EmailCC)
        </td>
        <td>
            @Html.TextBoxFor(m => m.EmailCC, new { @class = "bx-input", @tabindex = "2" })
            <small>@Html.ValidationMessage("EmailCC")</small>
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(m => m.EmailBCC)
        </td>
        <td>
            @Html.TextBoxFor(m => m.EmailBCC, new { @class = "bx-input", @tabindex = "2" })
            <small>@Html.ValidationMessage("EmailBCC")</small>
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(m => m.EmailReply)
        </td>
        <td>
            @Html.TextBoxFor(m => m.EmailReply, new { @class = "bx-input", @tabindex = "2" })
            <small>@Html.ValidationMessage("EmailReply")</small>
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(m => m.Closed)</td>
        <td>@Html.CheckBoxFor(m => m.Closed, new { @class = "js-switch" })</td>
    </tr>

</table>

<div class="bx-footer right">
    <br />
    <button name="save" type="submit" class="t-button action" title="Save">Save</button>
    @Html.ActionLink("Cancel", "EventManager", "Event", new { area = "RBM", @class = "t-button action", @title = "Cancel", @tabindex = "5" })
</div><br />

}

<script>

    $(document).ready(function () {
        var edit = '@Html.Raw(Model.EditMode)';
        console.log(edit.toLowerCase());
        if (edit.toLowerCase() == "true") {

            $.get('@Url.Action("GetMetadataNodes", "Event", new RouteValueDictionary { { "area", "EMM" } })', { id: @Model.MetadataStructureId }, function (data) {
            var jsonData = JSON.parse(data);
                jsonData.forEach(function (object) {
                    if ('@Model.XPathToEmail' == object.XPath) {
                        $('#XPathToEmail').append('<option selected="selected" value="' + object.XPath + '">' + object.DisplayName + '</option>');
                    }
                    else {
                        $('#XPathToEmail').append('<option value="' + object.XPath + '">' + object.DisplayName + '</option>');
                    }

                    if ('@Model.XPathToFirstName' == object.XPath) {
                        $('#XPathToFirstName').append('<option selected="selected" value="' + object.XPath + '">' + object.DisplayName + '</option>');
                    }
                    else {
                        $('#XPathToFirstName').append('<option value="' + object.XPath + '">' + object.DisplayName + '</option>');
                    }
                    if ('@Model.XPathToLastName' == object.XPath) {
                        $('#XPathToLastName').append('<option selected="selected" value="' + object.XPath + '">' + object.DisplayName + '</option>');
                    }
                    else {
                        $('#XPathToLastName').append('<option value="' + object.XPath + '">' + object.DisplayName + '</option>');
                    }
                });
            });
        }
    });

    $('#MetadataStructureId').change(function () {
        var id = $('#MetadataStructureId').val();
        $('#XPathToEmail').empty();
        $('#XPathToFirstName').empty();
        $('#XPathToLastName').empty();
        $.get('@Url.Action("GetMetadataNodes", "Event", new RouteValueDictionary { { "area", "EMM" } })', { id: id }, function (data) {
            var jsonData = JSON.parse(data);
            jsonData.forEach(function (object) {
                $('#XPathToEmail').append('<option value="' + object.XPath + '">' + object.DisplayName + '</option>');
                $('#XPathToFirstName').append('<option value="' + object.XPath + '">' + object.DisplayName + '</option>');
                $('#XPathToLastName').append('<option value="' + object.XPath + '">' + object.DisplayName + '</option>');
            });
        });
    });

</script>